@if (Value is null)
{
    throw new ArgumentNullException(nameof(Value));
}
<h1 class="display-6 mb-4">Siteswap Generator</h1>
<div class="row row-cols-auto">
    <div class="form-check col">
        <input class="form-check-input" type="radio" name="flexRadioDefault" id="radio1" checked="@Value.IsExactNumber" @onclick="@(() => ExactNumberOrRangeOfBallsSwitched.InvokeAsync(true))">
        <label class="form-check-label" for="radio1">
            Exact Number
        </label>
    </div>
    <div class="form-check col">
        <input class="form-check-input" type="radio" name="flexRadioDefault" id="radio2" checked="@(!Value.IsExactNumber)" @onclick="@(() => ExactNumberOrRangeOfBallsSwitched.InvokeAsync(false))">
        <label class="form-check-label" for="radio2">
            Range
        </label>
    </div>
</div>

<div class="row row-cols-auto mt-1">
    @switch (Value.Objects)
    {
        case Between between:
            <div class="form-floating col">
                <input type="number" id="minNumberOfObjects" class="form-control hasMaxWidth" min="0" value="@between.MinNumber" @oninput="@(x => MinNumberChanged.InvokeAsync(ToInt(x)))"/>
                <label for="minNumberOfObjects">From</label>
            </div>

            <div class="form-floating col">
                <input type="number" id="maxNumberOfObjects" class="form-control hasMaxWidth" min="0" value="@between.MaxNumber" @oninput="@(x => MaxNumberChanged.InvokeAsync(ToInt(x)))"/>
                <label for="maxNumberOfObjects">To</label>
            </div>
            break;
        case ExactNumber exactNumber:
            <div class="form-floating col">
                <input type="number" id="numberOfObjects" class="form-control hasMaxWidth" min="0" placeholder="7" value="@exactNumber.Number" @oninput="@(x => ExactNumberChanged.InvokeAsync(ToInt(x)))"/>
                <label for="numberOfObjects" class="bmd-label-floating">Clubs</label>
            </div>
            break;
        default:
            throw new ArgumentOutOfRangeException();
    }
</div>

<div class="row row-cols-auto mt-2">

    <div class="form-floating col">
        <input type="number" id="period" class="form-control hasMaxWidth" min="0" placeholder="5" value="@Value.Period" @oninput="@(x => PeriodChanged.InvokeAsync(ToInt(x)))"/>
        <label for="period">Period</label>
    </div>

    <div class="form-floating col">
        <input type="number" id="maxThrow" class="form-control hasMaxWidth" min="0" placeholder="10" value="@Value.MaxThrow" @oninput="@(x => MaxThrowChanged.InvokeAsync(ToInt(x)))"/>
        <label for="maxThrow">Max Throw</label>
    </div>

    <div class="form-floating col">
        <input type="number" id="minThrow" class="form-control hasMaxWidth" min="0" placeholder="2" value="@Value.MinThrow" @oninput="@(x => MinThrowChanged.InvokeAsync(ToInt(x)))"/>
        <label for="minThrow">Min Throw</label>
    </div>

    <div class="form-floating col">
        <input type="number" id="numberOfJugglers" class="form-control hasMaxWidth" placeholder="2" min="1" value="@Value.NumberOfJugglers" @oninput="@(x => NumberOfJugglersChanged.InvokeAsync(ToInt(x)))"/>
        <label for="numberOfJugglers">Jugglers</label>
    </div>
</div>

<div class="row mt-5">

    <div class="col">
        <FilterSelection></FilterSelection>
    </div>
    <div class="col">
        <div class="row">
            <h5>Your currently applied Filters</h5>
            <ul class="list-group">
                @foreach (var (filter,i) in Value.Filter.Select((x, i) => (x,i)))
                {
                    <li class="list-group-item">
                        <text>@filter.Display()</text>
                        <button type="button" class="btn btn-outline-warning float-end" @onclick="@(_ => RemoveFilter.InvokeAsync(i))"> - </button>
                    </li>
                }
            </ul>
        </div>
    </div>
</div>
    <div class="row mt-5">
        <button class="btn btn-primary w-25" id="generate" type="submit" disabled="@Value.IsGenerating" @onclick="Generate">Generate</button>
    </div>
@code {

    [Parameter]
    public GeneratorState? Value { get; set; }

    [Parameter]
    public Action Generate { get; set; } = () => { };

    [Parameter]
    public EventCallback<int?> PeriodChanged { get; set; }

    [Parameter]
    public EventCallback<int?> MinNumberChanged { get; set; }

    [Parameter]
    public EventCallback<int?> MaxNumberChanged { get; set; }

    [Parameter]
    public EventCallback<int?> ExactNumberChanged { get; set; }

    [Parameter]
    public EventCallback<int?> MaxThrowChanged { get; set; }

    [Parameter]
    public EventCallback<int?> MinThrowChanged { get; set; }

    [Parameter]
    public EventCallback<int?> NumberOfJugglersChanged { get; set; }

    [Parameter]
    public EventCallback<bool> ExactNumberOrRangeOfBallsSwitched { get; set; }

    [Parameter]
    public EventCallback<int> RemoveFilter { get; set; }

    private int? ToInt(ChangeEventArgs eventArgs)
    {
        if (int.TryParse(eventArgs.Value as string, out var result))
        {
            return result;
        }
        return null;
    }

    private bool ToBool(ChangeEventArgs eventArgs)
    {
        return (bool)(eventArgs.Value ?? throw new ArgumentNullException());
    }

}