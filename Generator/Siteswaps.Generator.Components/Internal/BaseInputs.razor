@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@inject IDispatcher Dispatcher
@inject IState<SiteswapGeneratorState> State

<div class="row row-cols-auto">
    <div class="form-check col">
        <input class="form-check-input" type="radio" name="flexRadioDefault" id="radio1" checked="@Value.IsExactNumber" @onclick="@(() => Dispatcher.Dispatch(new ExactNumberOrRangeOfBallsSwitchedAction(true)))">
        <label class="form-check-label" for="radio1">
            Exact Number
        </label>
    </div>
    <div class="form-check col">
        <input class="form-check-input" type="radio" name="flexRadioDefault" id="radio2" checked="@(!Value.IsExactNumber)" @onclick="@(() => Dispatcher.Dispatch(new ExactNumberOrRangeOfBallsSwitchedAction(false)))">
        <label class="form-check-label" for="radio2">
            Range
        </label>
    </div>
</div>

<div class="row row-cols-auto mt-1">
    @switch (Value.Objects)
    {
        case Between between:
            <div class="col">
                <div class="form-floating">
                    <input type="number" id="minNumberOfObjects" class="form-control " min="0" value="@between.MinNumber" @oninput="@(x => Dispatcher.Dispatch(new MinNumberChangedAction(ToInt(x))))"/>
                    <label for="minNumberOfObjects">From</label>
                </div>
            </div>

            <div class="col">
                <div class="form-floating">
                    <input type="number" id="maxNumberOfObjects" class="form-control " min="0" value="@between.MaxNumber" @oninput="@(x => Dispatcher.Dispatch(new MaxNumberChangedAction(ToInt(x))))"/>
                    <label for="maxNumberOfObjects">To</label>
                </div>
            </div>
            break;
        case ExactNumber exactNumber:
            <div class="col">
                <div class="form-floating">
                    <input type="number" id="numberOfObjects" class="form-control " min="0" placeholder="7" value="@exactNumber.Number" @oninput="@(x => Dispatcher.Dispatch(new ExactNumberChangedAction(ToInt(x))))"/>
                    <label for="numberOfObjects" class="bmd-label-floating">Clubs</label>
                </div>
            </div>
            break;
        default:
            throw new ArgumentOutOfRangeException();
    }
</div>

<div class="row row-cols-auto mt-2">
    <div class="col">
        <div class="form-floating">
            <input type="number" id="period" class="form-control " min="0" placeholder="5" value="@Value.Period" @oninput="@(x => Dispatcher.Dispatch(new PeriodChangedAction(ToInt(x))))"/>
            <label for="period">Period</label>
        </div>
    </div>

    <div class="col">
        <div class="form-floating">
            <input type="number" id="maxThrow" class="form-control " min="0" placeholder="10" value="@Value.MaxThrow" @oninput="@(x => Dispatcher.Dispatch(new MaxThrowChangedAction(ToInt(x))))"/>
            <label for="maxThrow">Max Throw</label>
        </div>
    </div>

    <div class="col">
        <div class="form-floating">
            <input type="number" id="minThrow" class="form-control " min="0" placeholder="2" value="@Value.MinThrow" @oninput="@(x => Dispatcher.Dispatch(new MinThrowChangedAction(ToInt(x))))"/>
            <label for="minThrow">Min Throw</label>
        </div>
    </div>

    <div class="col">
        <div class="form-floating">
            <input type="number" id="numberOfJugglers" class="form-control " placeholder="2" min="1" value="@Value.NumberOfJugglers" @oninput="@(x => Dispatcher.Dispatch(new NumberOfJugglersChangedAction(ToInt(x))))"/>
            <label for="numberOfJugglers">Jugglers</label>
        </div>
    </div>
</div>

@code
{
    private GeneratorState Value => State.Value.State;
    
    private static int? ToInt(ChangeEventArgs eventArgs)
    {
        if (int.TryParse(eventArgs.Value as string, out var result))
        {
            return result;
        }
        return null;
    }
}
