@inherits FluxorComponent
@inject IState<SiteswapGeneratorState> State

@inject IDispatcher Dispatcher
<div style="overflow-x: auto; white-space: nowrap;">
    <div class="row" style="flex-wrap: nowrap; width: 100%;">
        <div>
            <RadzenCheckBox @bind-Value="IsGlobalPattern" Name="IsGlobal"/>
            <RadzenLabel Text="Global" Component="IsGlobal" Style="vertical-align: middle;"/>
        </div>
    </div>

    <div class="row" style="flex-wrap: nowrap; width: 100%;">

        @for (var i = 0; i < Throws.Count; i++)
        {
            var i1 = i;

            var t = Throws[i];
            <div style="width: 150px;">
                <Dropdown
                    SelectedThrow="@t"
                    SelectedThrowChanged="@(x => ThrowChanged(i1, x))"/>
            </div>
        }
        <div style="width: 150px;">
            <RadzenButton ButtonStyle="ButtonStyle.Secondary" Text="Add" Click="Add" Disabled="@(CanAddThrow() is false)"/>
        </div>

    </div>
    <RadzenButton Text="Add Filter" Click="AddFilter"/>
    
</div>
@code {

    [Parameter]
    public List<Throw> Throws { get; set; } = new() { Throw.Empty};

    [Parameter]
    public int Period { get; set; } = 5;

    [Parameter]
    public bool IsGlobalPattern { get; set; } = true;

    private void Add() => Throws.Add(Throw.Empty);

    private bool CanAddThrow() => Throws.Count < Period;

    private void AddFilter() => Dispatcher.Dispatch(new NewFilterCreatedAction(new NewPatternFilterInformation(Throws, Period, IsGlobalPattern)));

    private void ThrowChanged(int i, Throw t) => Throws[i] = t;

}
