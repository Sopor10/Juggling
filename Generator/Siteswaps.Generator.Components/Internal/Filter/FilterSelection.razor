@inherits FluxorComponent
@inject IDispatcher _dispatcher
@inject IState<SiteswapGeneratorState> _state
<div>
    <h5 class="pb-1">Add Filter</h5>
    <div class="row">
        <div class="col">
            <div class="input-group">
                <label for="filterSelect" class="input-group-text">Filter Type</label>
                <select id="filterSelect" class="form-select" value="@Value.FilterType" @onchange="SelectionChanged">
                    @foreach (var filter in KnownFilters.AvailableSelection())
                    {
                        <option value="@filter">@filter</option>
                    }
                </select>
            </div>
        </div>

    </div>
    <div class="row">
        <div class="col mt-4">
            <DynamicComponent Type="@KnownFilters.MapFilterInformationToRenderType(Value)"></DynamicComponent>
        </div>
    </div>

    <div class="row">
        <div class="col">
            <button type="button" class="btn btn-outline-primary mt-2" @onclick="OnClick">Add</button>
        </div>
    </div>

</div>

@code {

    private IFilterInformation Value => _state.Value.NewFilter;

    private void SelectionChanged(ChangeEventArgs eventArgs)
    {
        if (Enum.TryParse(eventArgs.Value?.ToString(), out FilterType filterType))
        {
            _dispatcher.Dispatch(new FilterTypeSelectionChangedAction(filterType));
        }
    }

    private void OnClick()
    {
        _dispatcher.Dispatch(new NewFilterCreatedAction(Value));
    }

    private KnownFilterTypes KnownFilters => _state.Value.KnownFilters;

}