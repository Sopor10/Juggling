@inherits FluxorComponent
@inject IDispatcher _dispatcher
@inject IState<SiteswapGeneratorState> _state
<div class="container">
    <h5 class="pb-1">Add Filter</h5>
    <div class="row">
        <div class="row-cols-auto">
            <div class="col-11">
                <div class="form-floating">
                    <select id="filterSelect" class="form-select" value="@Value.FilterType" @onchange="SelectionChanged">
                        @foreach (var filter in KnownFilters.AvailableSelection())
                        {
                            <option value="@filter">@filter</option>
                        }
                    </select>
                    <label for="filterSelect">Filter Type</label>
                </div>
            </div>
        </div>

    </div>
    <div class="row">
        <div class="mt-4">
            <DynamicComponent Type="@KnownFilters.MapFilterInformationToRenderType(Value)"></DynamicComponent>
        </div>
    </div>

    <div class="row w-25">
        <button type="button" class="btn btn-outline-primary mt-2" @onclick="OnClick">Add</button>
    </div>

</div>

@code {

        private const string PatternFilterInformationId = "patternFilterExplanationModal";
        private const string NumberFilterInformationId = "numberFilterExplanationModal";

    private string GetPatternInformationId()
    {
        return Value.FilterType switch
        { 
            FilterType.Number => NumberFilterInformationId,
            FilterType.Pattern => PatternFilterInformationId,
            _ => throw new ArgumentOutOfRangeException()
            };
    }

    private IFilterInformation Value => _state.Value.NewFilter;

    private void SelectionChanged(ChangeEventArgs eventArgs)
    {
        if (Enum.TryParse(eventArgs.Value?.ToString(), out FilterType filterType))
        {
            _dispatcher.Dispatch(new FilterTypeSelectionChangedAction(filterType));
        }
    }

    private void OnClick()
    {
        _dispatcher.Dispatch(new NewFilterCreatedAction(Value));
    }

    private KnownFilterTypes KnownFilters => _state.Value.KnownFilters;

}