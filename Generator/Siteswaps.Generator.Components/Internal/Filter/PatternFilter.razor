@inherits FluxorComponent
@inject IState<SiteswapGeneratorState> _state
@inject IDispatcher _dispatcher

@if (Value is null)
{
    return;
}
<div class="d-flex flex-row mt-4">

    @for (var index = 0; index < Value.Pattern.Length; index++)
    {
        var localIndex = index;
        <div class="d-flex flex-row">
                <select
                    class="form-select"
                    value="@Value.Pattern[index]"
                    @onchange="x => OnClick(localIndex, x)">
                    <option value="-1">_</option>
                    <option value="-2">p</option>
                    <option value="-3">s</option>
                    @for (var j = MinValue; j <= MaxValue; j++)
                    {
                        <option value="@j">@j</option>
                    }
                </select>
        </div>
    }

</div>

@code {

    private int? MaxValue => _state.Value.State.MaxThrow;

    private int? MinValue => _state.Value.State.MinThrow;

    private PatternFilterInformation? Value => _state.Value.NewFilter as PatternFilterInformation;

    private void OnClick(int index, ChangeEventArgs changeEventArgs)
    {
        if (int.TryParse(changeEventArgs.Value as string, out var chosenNumber))
        {
            _dispatcher.Dispatch(new PatternFilterValueChangedAction(index, chosenNumber));
        }
    }

}