@page "/easyUI"
@inherits FluxorComponent
@inject IState<SiteswapGeneratorState> State
@inject DialogService DialogService

@inject IDispatcher Dispatcher

<div class="col input-container">


    <div class="row mt-5 mb-5 w-100" style="min-width: 300px;">
        <div class="col input-column">
            <h4 class="mb-3">Jugglers</h4>
            <CustomNumeric Id="numeric-input-numberOfJugglers" Value="State.Value.State.NumberOfJugglers" Min="2" Max="5" OnChange="@(x => Dispatcher.Dispatch(new NumberOfJugglersChangedAction(x)))"/>
            <CustomSlider Min="2" Max="5" Value="State.Value.State.NumberOfJugglers" OnChange="@(x => Dispatcher.Dispatch(new NumberOfJugglersChangedAction(x)))"/>
        </div>
        <div class="col input-column">
            <h4 class="mb-3">Period</h4>
            <CustomNumeric Id="numeric-input-period" Value="State.Value.State.Period.Value" Min="1" Max="30" OnChange="@(x => Dispatcher.Dispatch(CreateAction(x)))"/>
            <CustomSlider Min="1" Max="30" Value="State.Value.State.Period.Value" OnChange="@(x => Dispatcher.Dispatch(CreateAction(x)))"/>
        </div>
        <div class="col input-column">
            <h4 class="mb-3">Clubs</h4>
            <RangeInput Clubs="Clubs" ClubsChanged="SliderChanged"></RangeInput>
        </div>
    </div>


    <div class="row mb-5 w-100">
        <h4 class="mb-3">Throws</h4>
        <SelectList TItem="Throw" Items="@(allThrows)" SelectedItems="@Throws" TextField="x => x.Name" OnChange="ThrowsChanged"></SelectList>
    </div>


    <div class="row mb-5 w-100">
        <div class="col">
            <h4 class="mb-3">Filter</h4>
            <SelectedFilters ShowHeading="false" AllowEdit="false"/>
            <button class="btn btn-secondary float-end" id="add-filter" type="button"  @onclick="ShowInlineDialog">Add Filter</button>
            
        </div>
    </div>

    <div class="row mt-5 w-100">
        <div class="col">
            <button class="btn btn-primary float-end" id="generate" type="submit" disabled="@State.Value.IsGenerating" @onclick="_ => Dispatcher.Dispatch(new GenerateSiteswapsAction(State.Value.State))">Generate</button>
        </div>
    </div>
</div>


@code {
    IEnumerable<Throw> Throws => State.Value.State.Throws;
    private readonly IEnumerable<Throw> allThrows = Throw.All.ToList();
    private IEnumerable<int> Clubs => new[] {(State.Value.State.Objects as Between)?.MinNumber ?? 6, (State.Value.State.Objects as Between)?.MaxNumber ?? 6};

    protected override void OnInitialized()
    {
        Dispatcher.Dispatch(new CreateFilterFromThrowList(true));
        base.OnInitialized();
    }

    private void SliderChanged(IEnumerable<int> values)
    {
        Dispatcher.Dispatch(new MinNumberChangedAction(values.First()));
        Dispatcher.Dispatch(new MaxNumberChangedAction(values.Last()));
    }

    private void ThrowsChanged(IEnumerable<Throw> throws)
    {
        Dispatcher.Dispatch(new ThrowsChangedAction(throws));

        if (Throws.Any() is false)
        {
            return;
        }

        Dispatcher.Dispatch(new MaxThrowChangedAction(Throws.Select(x => x.Height).Max()));
        Dispatcher.Dispatch(new MinThrowChangedAction(Throws.Select(x => x.Height).Min()));
    }

    private async Task ShowInlineDialog()
    {
        await DialogService.OpenAsync<Filter>("New Pattern Filter", options: new DialogOptions
        {
            CloseDialogOnOverlayClick = true,
            Height = "300px",
            Style = "mind-width: 300px"
        });
    }

    private static PeriodChangedAction CreateAction(int? x)
    {
        return new PeriodChangedAction(new Period(x ?? throw new ArgumentNullException()));
    }

}
