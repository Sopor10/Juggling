@page "/easyUI"
@inherits FluxorComponent
@inject IState<SiteswapGeneratorState> State
@inject DialogService DialogService

@inject IDispatcher Dispatcher

<div class="row px-3">
    <div class="col p-3" style="min-width: 300px;">
        <RadzenCard>
            <h4>Throws</h4>
            <RadzenListBox TValue="IEnumerable<Throw>"
                           AllowFiltering="false"
                           Value="@Throws" 
                           Change="ThrowsChanged" 
                           Multiple="true" 
                           Data="@(allThrows)"
                           TextProperty="@(nameof(Throw.Name))"/>
        </RadzenCard>
    </div>

    <SliderInputs
        Clubs="Clubs"
        Period="State.Value.State.Period?.Value"
        NumberOfJugglers="State.Value.State.NumberOfJugglers"
        ClubsChanged="SliderChanged"
        PeriodChanged="@(x => Dispatcher.Dispatch(CreateAction(x)))"
        NumberOfJugglersChanged="@(x => Dispatcher.Dispatch(new NumberOfJugglersChangedAction(x)))"/>

    <div class="col p-3" style="min-width: 300px;">
        <RadzenCard>
            <div class="p-3">
                <h4>Filter</h4>
                <div class="row">
                    <SelectedFilters 
                        ShowHeading="false" 
                        AllowEdit="false"
                        Filter="State.Value.State.Filter"
                        OnEditFilter="EditExistingFilter"
                        OnRemoveFilter="@(i => Dispatcher.Dispatch(new RemoveFilterNumber(i)))"/>
                </div>
                <div class="row">
                    <RadzenButton id="add-filter" Text="Add Filter" Click="@CreateNewFilter"/>
                </div>
            </div>
        </RadzenCard>
    </div>
</div>


<div class="row px-3">
    <div class="col p-3">
        <GenerateButton/>
    </div>
</div>

@code {
    IEnumerable<Throw> Throws => State.Value.State.Throws;
    private readonly IEnumerable<Throw> allThrows = Throw.All.ToList();
    private IEnumerable<int> Clubs => new[] {(State.Value.State.Objects as Between)?.MinNumber ?? 6, (State.Value.State.Objects as Between)?.MaxNumber ?? 6};

    protected override void OnInitialized()
    {
        Dispatcher.Dispatch(new CreateFilterFromThrowList(true));
        base.OnInitialized();
    }

    private void SliderChanged(IEnumerable<int> values)
    {
        Dispatcher.Dispatch(new MinNumberChangedAction(values.First()));
        Dispatcher.Dispatch(new MaxNumberChangedAction(values.Last()));
    }

    private void ThrowsChanged(object obj)
    {
        if (obj is IEnumerable<Throw> newThrows)
        {
            Dispatcher.Dispatch(new ThrowsChangedAction(newThrows));

            if (Throws.Any() is false)
            {
                return;
            }
            Dispatcher.Dispatch(new MaxThrowChangedAction(Throws.Select(x => x.Height).Max()));
            Dispatcher.Dispatch(new MinThrowChangedAction(Throws.Select(x => x.Height).Min()));
        }
    }

    private async Task CreateNewFilter()
    {
        await DialogService.OpenAsync<Filter>("New Pattern Filter", options: GetDialogOptions());
    }

    private static PeriodChangedAction CreateAction(int? x)
    {
        return new PeriodChangedAction(new Period(x ?? throw new ArgumentNullException()));
    }

    private static DialogOptions GetDialogOptions()
    {
        return new DialogOptions()
        {
            CloseDialogOnOverlayClick = true,
            Height = "300px",
            Style = "mind-width: 300px"
        };
    }

    private async Task EditExistingFilter(int i)
    {
        await DialogService.OpenAsync<Filter>("New Pattern Filter", new Dictionary<string, object>
        {
            { nameof(Filter.FilterNumber), i },
            { nameof(Filter.Throws), (State.Value.State.Filter[i] as NewPatternFilterInformation)?.Pattern ?? new List<Throw>() },
            { nameof(Filter.IsGlobalPattern), (State.Value.State.Filter[i] as NewPatternFilterInformation)?.IsGlobalPattern ?? true }
        }, GetDialogOptions());
    }

}
