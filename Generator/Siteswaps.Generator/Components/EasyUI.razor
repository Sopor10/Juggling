@page "/easyUI"
@inherits FluxorComponent
@inject IState<SiteswapGeneratorState> State
@inject DialogService DialogService

@inject IDispatcher Dispatcher

<EasyUIComponent
    Clubs="Clubs"
    NumberOfClubsChanged="NumberOfClubsChanged"
    Filter="State.Value.State.Filter"
    Period="State.Value.State.Period?.Value"
    PeriodChanged="@(x => Dispatcher.Dispatch(CreatePeriodChangedAction(x)))"
    Throws="Throws"
    ThrowsChanged="ThrowsChanged"
    NumberOfJugglers="State.Value.State.NumberOfJugglers"
    NumberOfJugglersChanged="@(x => Dispatcher.Dispatch(new NumberOfJugglersChangedAction(x)))"
    CreateNewFilter="CreateNewFilter"
    EditExistingFilter="EditExistingFilter"
    OnRemoveFilter="@(i => Dispatcher.Dispatch(new RemoveFilterNumber(i)))"
    IsGenerating="State.Value.IsGenerating"
    Generate="@(() => Dispatcher.Dispatch(new GenerateSiteswapsAction(State.Value.State)))"/>

@code {
    IEnumerable<Throw> Throws => State.Value.State.Throws;
    private IEnumerable<int> Clubs => new[] {(State.Value.State.Objects as Between)?.MinNumber ?? 6, (State.Value.State.Objects as Between)?.MaxNumber ?? 6};

    protected override void OnInitialized()
    {
        Dispatcher.Dispatch(new CreateFilterFromThrowList(true));
        base.OnInitialized();
    }

    private void NumberOfClubsChanged(IEnumerable<int> values)
    {
        Dispatcher.Dispatch(new MinNumberChangedAction(values.First()));
        Dispatcher.Dispatch(new MaxNumberChangedAction(values.Last()));
    }

    private void ThrowsChanged(IEnumerable<Throw> newThrows)
    {
        Dispatcher.Dispatch(new ThrowsChangedAction(newThrows));

        if (Throws.Any() is false)
        {
            return;
        }
        Dispatcher.Dispatch(new MaxThrowChangedAction(Throws.Select(x => x.Height).Max()));
        Dispatcher.Dispatch(new MinThrowChangedAction(Throws.Select(x => x.Height).Min()));
    }

    private async Task CreateNewFilter()
    {
        await DialogService.OpenAsync<Filter>("New Pattern Filter", options: GetDialogOptions());
    }

    private static PeriodChangedAction CreatePeriodChangedAction(int? x)
    {
        return new PeriodChangedAction(new Period(x ?? throw new ArgumentNullException()));
    }

    private static DialogOptions GetDialogOptions()
    {
        return new DialogOptions()
        {
            CloseDialogOnOverlayClick = true,
            Height = "300px",
            Style = "mind-width: 300px"
        };
    }

    private async Task EditExistingFilter(int i)
    {
        await DialogService.OpenAsync<Filter>("New Pattern Filter", new Dictionary<string, object>
        {
            {nameof(Filter.FilterNumber), i},
            {nameof(Filter.Throws), (State.Value.State.Filter[i] as NewPatternFilterInformation)?.Pattern ?? new List<Throw>()},
            {nameof(Filter.IsGlobalPattern), (State.Value.State.Filter[i] as NewPatternFilterInformation)?.IsGlobalPattern ?? true}
        }, GetDialogOptions());
    }

}
