@page "/easyUI"
@inherits FluxorComponent
@inject IState<SiteswapGeneratorState> State
@inject DialogService DialogService

@inject IDispatcher Dispatcher

<div class="row px-3">
    <div class="col p-3" style="min-width: 300px;">
        <RadzenCard>
            <h4>Throws</h4>
            <RadzenListBox TValue="IEnumerable<Throw>" AllowFiltering="false" Value="@Throws" Change="ThrowsChanged" Multiple="true" Data="@(allThrows)"
                           TextProperty="@(nameof(Throw.Name))"/>
        </RadzenCard>
    </div>

    <div class="col p-3" style="min-width: 300px;">
        <RadzenCard>
            <div class="p-3">
                <h4>Jugglers</h4>
                <div class="row">
                    <RadzenNumeric TValue="int?" Step="1" Min="2" Max="5" Value="State.Value.State.NumberOfJugglers" Change="@(x => Dispatcher.Dispatch(new NumberOfJugglersChangedAction(x)))" ShowUpDown="false"/>
                    <RadzenSlider TValue="int?" Step="1" Min="2" Max="5" Value="State.Value.State.NumberOfJugglers" Change="@(x => Dispatcher.Dispatch(new NumberOfJugglersChangedAction(x)))" Style="width: 100%"/>
                </div>
            </div>
            <div class="p-3">
                <h4>Period</h4>
                <div class="row">
                    <RadzenNumeric id="numeric-input-period" TValue="int?" Step="1" Min="1" Max="30" Value="State.Value.State.Period.Value" Change="@(x => Dispatcher.Dispatch(CreateAction(x)))" ShowUpDown="false"/>
                    <RadzenSlider TValue="int?" Step="1" Min="1" Max="30" Value="State.Value.State.Period.Value" Change="@(x => Dispatcher.Dispatch(CreateAction(x)))" Style="width: 100%"/>
                </div>
            </div>
            <div class="p-3">
                <h4>Number of clubs</h4>
                <div class="row">
                    <RangeInput Clubs="Clubs" ClubsChanged="SliderChanged"></RangeInput>
                </div>
            </div>
        </RadzenCard>
    </div>

    <div class="col p-3" style="min-width: 300px;">
        <RadzenCard>
            <div class="p-3">
                <h4>Filter</h4>
                <div class="row">
                    <SelectedFilters ShowHeading="false" AllowEdit="false"/>
                </div>
                <div class="row">
                    <CustomButton Id="add-filter" ButtonText="Add Filter" OnClick="@ShowInlineDialog" />
                </div>
            </div>
        </RadzenCard>
    </div>
</div>

<div class="row px-3">
    <div class="col p-3">
        <GenerateButton/>
    </div>
</div>

@code {
    IEnumerable<Throw> Throws => State.Value.State.Throws;
    private readonly IEnumerable<Throw> allThrows = Throw.All.ToList();
    private IEnumerable<int> Clubs => new[] { (State.Value.State.Objects as Between)?.MinNumber ?? 6, (State.Value.State.Objects as Between)?.MaxNumber ?? 6 };

    protected override void OnInitialized()
    {
        Dispatcher.Dispatch(new CreateFilterFromThrowList(true));
        base.OnInitialized();
    }

    private void SliderChanged(IEnumerable<int> values)
    {
        Dispatcher.Dispatch(new MinNumberChangedAction(values.First()));
        Dispatcher.Dispatch(new MaxNumberChangedAction(values.Last()));
    }

    private void ThrowsChanged(object obj)
    {
        if (obj is IEnumerable<Throw> newThrows)
        {
            Dispatcher.Dispatch(new ThrowsChangedAction(newThrows));

            if (Throws.Any() is false)
            {
                return;
            }
            Dispatcher.Dispatch(new MaxThrowChangedAction(Throws.Select(x => x.Height).Max()));
            Dispatcher.Dispatch(new MinThrowChangedAction(Throws.Select(x => x.Height).Min()));
        }
    }

    private async Task ShowInlineDialog()
    {
        await DialogService.OpenAsync<Filter>("New Pattern Filter", options: new DialogOptions()
                                                                            {
                                                                                CloseDialogOnOverlayClick = true,
                                                                                Height = "300px",
                                                                                Style = "mind-width: 300px"
                                                                            });
    }

    private static PeriodChangedAction CreateAction(int? x)
    {
        return new PeriodChangedAction(new(x??throw new ArgumentNullException()));
    }
}
