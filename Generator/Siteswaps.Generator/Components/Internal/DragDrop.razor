@page "/DragDrop"
@using Siteswaps.Generator.Components.State.FilterTrees

<RadzenRow class="rz-p-0 rz-p-lg-12">
    <RadzenColumn Size="12" SizeLG="6" OffsetLG="3">
        <RadzenTree AllowCheckParents="false" AllowCheckBoxes="false" AllowCheckChildren="false" Data=@entries Expand=@Load C Style="width: 100%; height: 300px" >
            <RadzenTreeLevel 
                Text=@GetTextForNode 
                Template=@Template 
                Expanded=@(_ => true) 
                Checkable="_ => false"/>
        </RadzenTree>
    </RadzenColumn>
</RadzenRow>

@code {
    IEnumerable<FilterNode> entries = [];
    FilterTree tree = new FilterTree(
        new AndNode(
            new OrNode(
                new FilterLeaf(new NewPatternFilterInformation([], true,true))), 
            new FilterLeaf(new EasyNumberFilter.NumberFilter()
                {
                    Amount = 5,
                    Throw = Throw.Heff,
                    Type = EasyNumberFilter.NumberFilterType.Exactly
                })
            ));
    protected override void OnInitialized()
    {
        if (tree.Root is not null)
        {
            entries = [tree.Root];
        }

    }

    void Load(TreeExpandEventArgs args)
    {
        var node = args.Value as FilterNode;

        args.Children.Data = node switch
        {
            AndNode andNode => andNode.Children,
            FilterLeaf filterLeaf => [],
            OrNode orNode => orNode.Children,
            _ => throw new ArgumentOutOfRangeException(nameof(node))
        };
        args.Children.Text = x => x switch
        {
            FilterLeaf leaf => leaf.Filter.Display(),
            AndNode => "And",
            OrNode => "Or",
            _ => throw new ArgumentOutOfRangeException(nameof(x))
        };
        args.Children.HasChildren = x => x is FilterLeaf is false;
        args.Children.Template = Template;
        args.Children.Checkable = o => false;
        args.Children.Expanded = x => true;
    }

    string GetTextForNode(object data)
    {
        return data switch
        {
            FilterLeaf leaf => leaf.Filter.Display(),
            AndNode => "And",
            OrNode => "Or",
            _ => throw new ArgumentOutOfRangeException(nameof(data))
        };
    }

    RenderFragment<RadzenTreeItem> Template = (context) => @<div>
                                                               @switch (context.Value)
                                                               {
                                                                   case AndNode andNode: <RadzenText Text="And"/>break;
                                                                   case OrNode orNode: <RadzenText Text="Or"/> break;
                                                                   case FilterLeaf leaf:
                                                                       <div class="card w-100 h-100 flex-grow-1">
                                                                           <div class="card-body d-flex flex-column justify-content-center">
                                                                               <div class="d-flex justify-content-between align-items-center">
                                                                                   <text class="text-break">@(leaf.Filter.Display())</text>
                                                                                   <div class="d-flex">
                                                                                       <button type="button" class="btn btn-outline-secondary ms-2 me-2">
                                                                                           <EditPencil/>
                                                                                       </button>
                                                                                       <button type="button" class="bi bi-trash btn btn-outline-danger">
                                                                                           <Trashcan/>
                                                                                       </button>
                                                                                   </div>
                                                                               </div>
                                                                           </div>
                                                                       </div>
                                                                       ;
                                                                       break;

                                                               }
                                                           </div>;



}