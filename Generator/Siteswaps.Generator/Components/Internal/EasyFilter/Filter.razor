@inherits FluxorComponent
@inject IState<SiteswapGeneratorState> State
@inject DialogService DialogService

@inject IDispatcher Dispatcher
<div style="overflow-x: auto; white-space: nowrap;">
    <div class="row" style="flex-wrap: nowrap; width: 100%;">
        <div>
            <RadzenCheckBox TValue="bool" Value="IsGlobalPattern" Name="IsGlobal" Change="ChangeAction"/>
            <RadzenLabel Text="Global" Component="IsGlobal" Style="vertical-align: middle;"/>
        </div>
    </div>

    <div class="row" style="flex-wrap: nowrap; width: 100%; padding-left: 4px; padding-right: 4px;">

        @for (var i = 0; i < Throws.Count; i++)
        {
            var i1 = i;

            var t = Throws[i];
            <div class="filter-dropdown" id="pattern-filter-dropdown-@(i1)">
                <Dropdown 
                    SelectedThrow="@t"
                    SelectedThrowChanged="@(x => ThrowChanged(i1, x))"/>
            </div>
        }
    </div>
    <RadzenButton id="finish-new-filter" Text=@(IsNewFilter?"Add Filter":"Change") Click="AddFilter"/>
    
</div>
@code {

    [Parameter]
    public int? FilterNumber { get; set; }

    private bool IsNewFilter => FilterNumber is null;
    
    [Parameter]
    public List<Throw> Throws { get; set; } = new() { };

    private LocalPeriod Period
    {
        get
        {
            if (IsGlobalPattern)
            {
                return State.Value.State.Period?.GetLocalPeriod(1) ?? new(5);
            }
            return State.Value.State.Period?.GetLocalPeriod(State.Value.State.NumberOfJugglers ?? 2) ?? new(5);
        }
    }

    [Parameter]
    public bool IsGlobalPattern { get; set; } = true;


    private void AddFilter()
    {
        if (IsNewFilter)
        {
            Dispatcher.Dispatch(new NewFilterCreatedAction(new NewPatternFilterInformation(Throws, IsGlobalPattern)));
        }
        else
        {
            Dispatcher.Dispatch(new ChangedFilterAction(new NewPatternFilterInformation(Throws, IsGlobalPattern), FilterNumber!.Value));
        }
        
        DialogService.Close();
    }



    private void ThrowChanged(int i, Throw t) => Throws[i] = t;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && Throws.Any() is false)
        {
            Throws = Enumerable.Repeat(Throw.Empty, Period.Value).ToList();
        }
        StateHasChanged();
        return base.OnAfterRenderAsync(firstRender);
    }

    private void ChangeAction(bool arg)
    {
        var currentPeriod = Period;

        IsGlobalPattern = arg;

        if (currentPeriod == Period)
        {
            return;
        }
        Throws = Enumerable.Repeat(Throw.Empty, Period.Value).ToList();
        StateHasChanged();
    }

}
