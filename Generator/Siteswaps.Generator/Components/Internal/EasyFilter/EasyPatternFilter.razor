@using System.Collections.Immutable
<div>
    <div class="d-flex flex-row">
        <div class="me-2">
            <RadzenDropDown 
                TValue="PatternRotation" 
                @bind-Value:get="PatternRotation" 
                Name="IsGlobal" 
                @bind-Value:set="PatternRotationChangedPrivate"
                TextProperty="Display"
                Data="Jugglers"/>
        </div>
        <div class="me-2">
            <RadzenCheckBox TValue="bool" @bind-Value:get="IsIncludePattern" Name="Include" @bind-Value:set="IsIncludePatternChangedPrivate" />
            <RadzenLabel Text="Include" Component="Include" Style="vertical-align: middle;"/>
        </div>
        <div class="me-2">
            <RadzenCheckBox TValue="bool" @bind-Value:get="ShouldBeValidLocally" Name="LocallyValid" @bind-Value:set="ShouldBeValidLocallyChanged" />
            <RadzenLabel Text="Locally valid" Component="LocallyValid" Style="vertical-align: middle;"/>
        </div>
    </div>

    <div>
        <Keyboard PossibleThrows="@PossibleThrows" @bind-Filter="Throws"></Keyboard>
    </div>
    <RadzenButton id="finish-new-filter" Text="@AddButtonText" Click="async _ => await AddFilter.InvokeAsync(new NewPatternFilterInformation(Throws, PatternRotation, IsIncludePattern, ShouldBeValidLocally))" data-testid="add-pattern-filter"/>
    
</div>
@code {
    
    [Parameter]
    public ImmutableList<Throw> PossibleThrows { get; set; } = [];

    [Parameter]
    public List<Throw> Throws { get; set; } = []; 
    
    [Parameter]
    public EventCallback<List<Throw>> ThrowsChanged { get; set; } 

    [Parameter]
    public int GlobalLength { get; set; } = 5;

    [Parameter]
    public int LocalLength { get; set; } = 5;
    
    [Parameter]
    public int NumberOfJugglers { get; set; } = 2;

    private int Length => PatternRotation.Value < 0 ? GlobalLength : LocalLength;
    
    [Parameter]
    public PatternRotation PatternRotation { get; set; } = PatternRotation.Global;
    
    [Parameter]
    public bool IsIncludePattern { get; set; } = true;
    
    [Parameter]
    public bool ShouldBeValidLocally { get; set; } = false;
   
    [Parameter]
    public EventCallback<bool> IsIncludePatternChanged { get; set; }
    
    [Parameter]
    public EventCallback<bool> ShouldBeValidLocallyChanged { get; set; }

    [Parameter]
    public EventCallback<PatternRotation> PatternRotationChanged { get; set; }

    private void IsIncludePatternChangedPrivate(bool arg)
    {
        IsIncludePattern = arg;
        IsIncludePatternChanged.InvokeAsync(arg);
    }
    
    private void ShouldBeValidLocallyPrivate(bool arg)
    {
        ShouldBeValidLocally = arg;
        ShouldBeValidLocallyChanged.InvokeAsync(arg);
    }
    

    private void PatternRotationChangedPrivate(PatternRotation arg)
    {
        PatternRotation = arg;
        PatternRotationChanged.InvokeAsync(arg);
    }

    [Parameter]
    public EventCallback<NewPatternFilterInformation> AddFilter { get; set; }
    
    [Parameter]
    public string AddButtonText { get; set; } = "Add Filter";

    public IEnumerable<PatternRotation> Jugglers => Enumerable
        .Range(0, NumberOfJugglers)
        .Select(x => new PatternRotation(x))
        .Prepend(PatternRotation.Local)
        .Prepend(PatternRotation.Global) ;

    protected override async Task OnParametersSetAsync()
    {
        if (Length != Throws.Count)
        {
            Throws = Enumerable.Repeat(Throw.Empty, Length).ToList();
            await ThrowsChanged.InvokeAsync(Throws);
        }
        await base.OnParametersSetAsync();
    }

}
