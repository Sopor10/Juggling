@page "/RangeInput"
<div class="col">
    <div class="row">
        <div class="col-6 p-0">
            <RadzenNumeric TValue="int" Step="1" Min="1" Max="30" Value="@(Clubs.First())" Change="MinClubsChanged" ShowUpDown="false" />
        </div>
        <div class="col-6 p-0">
        <RadzenNumeric TValue="int" Step="1" Min="1" Max="30" Value="@(Clubs.Last())" Change="MaxClubsChanged" ShowUpDown="false" />
        </div>
    </div>
    <div class="row p-0 m-0 w-100">
        <div class="col p-0">
            <RadzenSlider class="p-0" Range="true" Value="@InternalValues" Change="SliderChanged" TValue="IEnumerable<int>" Min="1" Max="30" Style="width: 100%; padding: 0; margin: 0;"/>
        </div>
    </div>
</div>

@code {

    private IEnumerable<int> InternalValues { get; set; } = new[] { 6, 7 };


    [Parameter]
    public IEnumerable<int> Clubs { get; set; } = new[] { 6, 6 };

    [Parameter]
    public EventCallback<IEnumerable<int>> ClubsChanged { get; set; }

    private async Task SliderChanged(IEnumerable<int> values)
    {
        InternalValues = values;
        Clubs = ToClubs(InternalValues);

        await ClubsChanged.InvokeAsync(Clubs);
    }


    private async Task MaxClubsChanged(int value)
    {
        if (value < InternalValues.Last())
        {
            return;
        }

        InternalValues = new List<int> { Clubs.First(), value + 1 };
        Clubs = ToClubs(InternalValues);
        await ClubsChanged.InvokeAsync(Clubs);
    }

    private async Task MinClubsChanged(int value)
    {
        if (value > InternalValues.First())
        {
            return;
        }
        
        InternalValues = new List<int> { value, Clubs.Last() };
        Clubs = ToClubs(InternalValues);
        await ClubsChanged.InvokeAsync(Clubs);
    }
    
    private List<int> ToClubs(IEnumerable<int> internalValues) => new List<int> { internalValues.First(), internalValues.Last() - 1 };
}
