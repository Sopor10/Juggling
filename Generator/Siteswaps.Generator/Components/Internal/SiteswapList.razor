<div >
    <h3 class="mt-3">
        Siteswaps
    </h3>

    <RadzenDataGrid TItem="SiteswapView"
                    Data="SiteswapViews"
                    AllowColumnResize="true"
                    AllowSorting="true"
                    PageSize="15"
                    AllowPaging="true"
                    PagerHorizontalAlign="HorizontalAlign.Center"
                    ShowPagingSummary="true"
                    AllowColumnPicking="true"
                    AllowMultiColumnSorting="true"
                    Responsive="false"
                    SelectionMode="DataGridSelectionMode.Single"
                    RowSelect="SelectSiteswap"
                    AllowRowSelectOnRowClick="EasySelection"
                    AllowPickAllColumns="false">
        <Columns>
            <RadzenDataGridColumn TItem="SiteswapView" Title="Passist Link" Frozen="true" Width="100px">
                <Template Context="data">
                    <RadzenLink Text="@data.DisplayValue" Path="@data.PassistLink" Target="_blank"/>
                </Template>
            </RadzenDataGridColumn>
            @if (Filter is null)
            {
                @foreach (var juggler in Enumerable.Range(0, NumberOfJugglers ?? 0))
                {
                    <RadzenDataGridColumn TItem="SiteswapView" Title=@string.Concat("Juggler ", (char) (juggler + 'A')) Frozen="true" Width="100px">
                        <Template Context="data">
                            <RadzenText Text="@data.LocalSiteswaps[juggler]"/>
                        </Template>
                    </RadzenDataGridColumn>
                }
            }
            else
            {
                <RadzenDataGridColumn TItem="SiteswapView" Title="Local Siteswap" Frozen="true" Width="100px">
                    <Template Context="data">
                        <RadzenText Text="@GetLocalSiteswap(data)"/>
                    </Template>
                </RadzenDataGridColumn>
            }
            <RadzenDataGridColumn TItem="SiteswapView" Property="NumberOfClubs" Title="Clubs" Frozen="true" Width="100px"/>
        </Columns>
    </RadzenDataGrid>
</div>

@code {

    [Parameter]
    public IReadOnlyCollection<Siteswap> Siteswaps { get; set; } = new List<Siteswap>();

    private IEnumerable<SiteswapView> SiteswapViews => Siteswaps.Select(x => new SiteswapView(x, NumberOfJugglers.GetValueOrDefault(2))).ToList();

    [Parameter]
    public int? NumberOfJugglers { get; set; } = 2;

    private string GenerateUrl(Siteswap siteswap)
    {
        return $"https://passist.org/siteswap/{siteswap}?jugglers={NumberOfJugglers.GetValueOrDefault(2)}";
    }

    private record SiteswapView(Siteswap Siteswap, int NumberOfJugglers)
    {
        public string DisplayValue => Siteswap.ToString();

        public string PassistLink => $"https://passist.org/siteswap/{Siteswap}?jugglers={NumberOfJugglers}";

        public int NumberOfClubs => Siteswap.Average;

        public List<string> LocalSiteswaps => Enumerable.Range(0, NumberOfJugglers).Select(i => Siteswap.GetLocalSiteswap(i, NumberOfJugglers)).ToList();
    }

    private async Task SelectSiteswap(SiteswapView obj)
    {
        await SiteswapSelected.InvokeAsync(obj.Siteswap);
    }
    
    [Parameter]
    public EventCallback<Siteswap> SiteswapSelected { get; set; }
    
    [Parameter]
    public bool EasySelection { get; set; }

    [Parameter]
    public InterfaceFilterInformation? Filter { get; set; }

    private string GetLocalSiteswap(SiteswapView value)
    {
        return value.Siteswap.RotateToMatchInterface(ToPattern(Filter.Pattern))?.GetLocalSiteswap(0, 2).ToString()??"No rotation found";
    }

    private Pattern ToPattern(IEnumerable<Throw> enumerable)
    {
        return Pattern.FromThrows(enumerable, NumberOfJugglers ?? 2);
    }

}
