@using System.Collections.Immutable
<div class="container">

    @if (ShowHeading)
    {
        <h5>Your currently selected Filters</h5>
    }

    <div style="height: 200px; overflow-y: scroll">
        <ul class="list-group">
            @foreach (var (filter,i) in Filter.Select((x, i) => (x,i)))
            {
                <li class="list-group-item">
                    <div class="row">
                        <div class="col-8">
                            <text>@filter.Display()</text>
                        </div>
                        <div class="col-4">
                            @if (AllowEdit is false)
                            {
                                <button type="button" class="btn btn-outline-secondary " @onclick="async () => await OnEditFilter.InvokeAsync(i)">
                                    <EditPencil/>
                                </button>   
                            }
                            <button type="button" class="bi bi-trash btn btn-outline-danger" @onclick="async () => await OnRemoveFilter.InvokeAsync(i)">
                                <Trashcan/>
                            </button>
                        </div>
                    </div>
                </li>
            }
        </ul>
    </div>
</div>

@code
{
    [Parameter]
    [EditorRequired]
    public bool ShowHeading { get; set; } = true;
    
    [Parameter]
    [EditorRequired]
    public bool AllowEdit { get; set; } = true;
    
    [Parameter]
    [EditorRequired]
    public EventCallback<int> OnEditFilter { get; set; } 
    
    [Parameter]
    [EditorRequired]
    public ImmutableList<IFilterInformation> Filter { get; set; } = ImmutableList<IFilterInformation>.Empty;
    
    [Parameter]
    [EditorRequired]
    public EventCallback<int> OnRemoveFilter { get; set; }
}
