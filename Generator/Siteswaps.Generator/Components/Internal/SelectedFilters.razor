@inherits FluxorComponent

@inject IDispatcher Dispatcher
@inject IState<SiteswapGeneratorState> State
@inject DialogService DialogService

<div class="row " style="min-height: 200px;">
    @if (ShowHeading)
    {
        <div class="col"><h5>Your currently selected Filters</h5></div>
    }

    @foreach (var (filter,i) in Value.Filter.Select((x, i) => (x,i)))
    {
        <div class="col-12 col-md-6 col-lg-4 mb-4">
            <div class="card w-100 h-100 flex-grow-1">
                <div class="card-body d-flex flex-column justify-content-center">
                    <div class="d-flex justify-content-center align-items-center">
                        <text class="text-break">@filter.Display()</text>
                    </div>
                    <div class="mt-auto d-flex justify-content-end">
                        @if (AllowEdit is false)
                        {
                            <button type="button" class="btn btn-outline-secondary me-2" @onclick="@(_ => ShowInlineDialog(i))">
                                <EditPencil />
                            </button>
                        }
                        <button type="button" class="bi bi-trash btn btn-outline-danger" @onclick="@(_ => Dispatcher.Dispatch(new RemoveFilterNumber(i)))">
                            <Trashcan />
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>


@code
{
    [Parameter]
    public bool ShowHeading { get; set; } = true;
    
    [Parameter]
    public bool AllowEdit { get; set; } = true;

    private GeneratorState Value => State.Value.State;

    private async Task ShowInlineDialog(int i)
    {
        await DialogService.OpenAsync<EasyFilter.Filter>("New Pattern Filter", new Dictionary<string, object>
        {
            { nameof(EasyFilter.Filter.FilterNumber), i },
            { nameof(EasyFilter.Filter.Throws), (Value.Filter[i] as NewPatternFilterInformation)?.Pattern ?? new List<Throw>() },
            { nameof(EasyFilter.Filter.IsGlobalPattern), (Value.Filter[i] as NewPatternFilterInformation)?.IsGlobalPattern ?? true }
        }, new DialogOptions
        {
            CloseDialogOnOverlayClick = true,
            Height = "300px",
            Style = "mind-width: 300px"
        });
    }
    
}
