@inherits FluxorComponent

@inject IDispatcher Dispatcher
@inject IState<SiteswapGeneratorState> State
<div>
    <h5 class="pb-1">Inputs</h5>
    <div class="row row-cols-auto">
        <div class="form-check col">
            <input class="form-check-input" type="radio" name="flexRadioDefault" id="radio1" checked="@Value.IsExactNumber" @onclick="@(() => Dispatcher.Dispatch(new ExactNumberOrRangeOfBallsSwitchedAction(true)))">
            <label class="form-check-label" for="radio1">
                Exact Number
            </label>
        </div>
        <div class="form-check col">
            <input class="form-check-input" type="radio" name="flexRadioDefault" id="radio2" checked="@(!Value.IsExactNumber)" @onclick="@(() => Dispatcher.Dispatch(new ExactNumberOrRangeOfBallsSwitchedAction(false)))">
            <label class="form-check-label" for="radio2">
                Range
            </label>
        </div>
    </div>

    <div class="d-flex flex-row ">
        @switch (Value.Objects)
        {
            case Between between:
                <div class="">
                    <NumberInput Label="From" Value="@between.MinNumber" OnInput="@(x => Dispatcher.Dispatch(new MinNumberChangedAction(ToInt(x))))"></NumberInput>
                </div>

                <div class="ms-2">
                    <NumberInput Label="To" Value="@between.MaxNumber" OnInput="@(x => Dispatcher.Dispatch(new MaxNumberChangedAction(ToInt(x))))"></NumberInput>
                </div>
                break;
            case ExactNumber exactNumber:
                <div class="">
                    <NumberInput Label="Clubs" Value="@exactNumber.Number" OnInput="@(x => Dispatcher.Dispatch(new ExactNumberChangedAction(ToInt(x))))"></NumberInput>
                </div>
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }
    </div>

    <div class="d-flex flex-column flex-md-row">
        <div class="d-flex flex-row">
            <div>
                <NumberInput Label="Period" Value="@Value.Period.Value" OnInput="@(x => Dispatcher.Dispatch(new PeriodChangedAction(ToPeriod(x))))"/>
            </div>
            <div class="ms-2 me-2">
                <NumberInput Label="Max Throw" Value="@Value.MaxThrow" OnInput="@(x => Dispatcher.Dispatch(new MaxThrowChangedAction(ToInt(x))))"/>
            </div>
        </div>
        <div class="d-flex flex-row">
            <div >
                <NumberInput Label="Min Throw" Value="@Value.MinThrow" OnInput="@(x => Dispatcher.Dispatch(new MinThrowChangedAction(ToInt(x))))"/>
            </div>

            <div class="ms-2">
                <NumberInput Label="Jugglers" Value="@Value.NumberOfJugglers" OnInput="@(x => Dispatcher.Dispatch(new NumberOfJugglersChangedAction(ToInt(x))))"/>
            </div>
        </div>
    </div>
</div>

@code
{
    private GeneratorState Value => State.Value.State;
    protected override void OnInitialized()
    {
        Dispatcher.Dispatch(new CreateFilterFromThrowList(false));
        base.OnInitialized();
    }
    
    private static int? ToInt(ChangeEventArgs eventArgs)
    {
        if (int.TryParse(eventArgs.Value as string, out var result))
        {
            return result;
        }
        return null;
    }
    
    private static Period? ToPeriod(ChangeEventArgs eventArgs)
    {
        if (int.TryParse(eventArgs.Value as string, out var result))
        {
            return new(result);
        }
        return null;
    }
}