@if (data is null)
{
    return;
}

<div @key="data.DisplayValue" data-testid="generated-siteswap-@data.DisplayValue" class="col-12 col-md-6 col-lg-4 col-xl-3 col-xxl-2 m-1 d-flex m-0">
    <div class="card d-flex flex-grow-1">
        <div class="card-body d-flex flex-column justify-content-center text-center p-3">
            <!-- Display the 'Passist Link' as a clickable link -->
            <h5 class="card-title">
                <a href="@data.PassistLink" target="_blank">@data.DisplayValue</a>
            </h5>

            <!-- Display each juggler's siteswap values -->
            <div class="mb-3">
                @foreach (var juggler in Enumerable.Range(0, data.NumberOfJugglers))
                {
                    <p class="card-text">
                        @((char)(juggler + 'A')): @data.Value.GetLocalSiteswap(juggler, data.NumberOfJugglers).LocalNotation
                        @(data.Value.Period.Value % data.NumberOfJugglers == 0 ? $"({data.Value.GetLocalSiteswap(juggler, data.NumberOfJugglers).Average():0.##})" : "")
                    </p>
                }
            </div>

            <!-- Display the number of clubs -->
            <div class="mt-auto">
                <p class="card-text">
                    <strong>Clubs:</strong> @data.NumberOfClubs
                </p>
            </div>
        </div>
    </div>
</div>
@code {

    [Parameter] public string Siteswap { get; set; } = "";
    [Parameter] public int NumberOfJugglers { get; set; }

    private SiteswapView? data { get; set; }

    protected override void OnParametersSet()
    {
        this.data = new SiteswapView(Generator.Siteswap.CreateFromCorrect(Siteswap), NumberOfJugglers);
        base.OnParametersSet();
    }

    public record SiteswapView(Siteswap Value, int NumberOfJugglers)
    {
        public string DisplayValue => Value.ToString();

        public string PassistLink => $"https://passist.org/siteswap/{Value}?jugglers={NumberOfJugglers}";

        public int NumberOfClubs => (int)Value.Average;

        public List<string> LocalSiteswaps => Enumerable.Range(0, NumberOfJugglers).Select(i => Value.GetLocalSiteswap(i, NumberOfJugglers).GlobalNotation).ToList();
        
    }
    
}