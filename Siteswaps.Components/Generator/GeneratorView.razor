@using Siteswaps.Components.Generator.State
@using ExhaustiveMatching
<EditForm Model="Values" OnValidSubmit="@Generate">

    <label for="exactNumberOrRangeOfBallsSwitchedCheckBox">Exact number or Range</label>
    <input type="number" id="exactNumberOrRangeOfBallsSwitchedCheckBox"  value="Values.IsExactNumber" @oninput="@(x => ExactNumberOrRangeOfBallsSwitched.InvokeAsync(ToBool(x)))"/>

    @switch (Values.Objects)
    {
        case Between between:
            <div class="form-floating">
                <input type="number" id="minNumberOfObjects" class="form-control" min="0" value="@between.MinNumber" @oninput="@(x => MinNumberChanged.InvokeAsync(ToInt(x)))"/>
                <label for="minNumberOfObjects">Min Number of Objects</label>
            </div>

            <div class="form-floating">
                <input type="number" id="maxNumberOfObjects" class="form-control" min="0" value="@between.MaxNumber" @oninput="@(x => MaxNumberChanged.InvokeAsync(ToInt(x)))"/>
                <label for="maxNumberOfObjects">Max Number of Objects</label>
            </div>
            break;
        case ExactNumber exactNumber:
            <div class="form-floating">
                <input type="number" id="numberOfObjects" class="form-control" min="0" placeholder="7" value="@exactNumber.Number" @oninput="@(x => ExactNumberChanged.InvokeAsync(ToInt(x)))"/>
                <label for="numberOfObjects" class="bmd-label-floating"># Objects</label>
            </div>
            break;
        default:
            ExhaustiveMatch.Failed(Values.Objects);
            break;
    }

    <div class="form-floating">
        <input type="number" id="period" class="form-control" min="0" placeholder="5" value="@Values.Period" @oninput="@(x => PeriodChanged.InvokeAsync(ToInt(x)))"/>
        <label for="period">Period</label>
    </div>

    <div class="form-floating">
        <input type="number" id="maxThrow" class="form-control" min="0" placeholder="10" value="@Values.MaxThrow" @oninput="@(x => MaxThrowChanged.InvokeAsync(ToInt(x)))"/>
        <label for="maxThrow">max throw</label>
    </div>

    <div class="form-floating">
        <input type="number" id="minThrow" class="form-control" min="0" placeholder="2" value="@Values.MinThrow" @oninput="@(x => MinThrowChanged.InvokeAsync(ToInt(x)))"/>
        <label for="minThrow">min throw</label>
    </div>

    <div class="form-floating">
        <input type="number" id="numberOfJugglers" class="form-control" placeholder="2" min="1" value="@Values.NumberOfJugglers" @oninput="@(x => NumberOfJugglersChanged.InvokeAsync(ToInt(x)))"/>
        <label for="numberOfJugglers">#Jugglers</label>
    </div>

    <input id="generate" type="submit" disabled="@Values.IsGenerating"/>
</EditForm>

@code {

    [Parameter]
    public GeneratorState Values { get; set; }

    [Parameter]
    public Action Generate { get; set; }

    [Parameter]
    public EventCallback<int> PeriodChanged { get; set; }

    [Parameter]
    public EventCallback<int> MinNumberChanged { get; set; }

    [Parameter]
    public EventCallback<int> MaxNumberChanged { get; set; }

    [Parameter]
    public EventCallback<int> ExactNumberChanged { get; set; }

    [Parameter]
    public EventCallback<int> MaxThrowChanged { get; set; }

    [Parameter]
    public EventCallback<int> MinThrowChanged { get; set; }

    [Parameter]
    public EventCallback<int> NumberOfJugglersChanged { get; set; }

    [Parameter]
    public EventCallback<bool> ExactNumberOrRangeOfBallsSwitched { get; set; }

    private int ToInt(ChangeEventArgs eventArgs) => int.Parse((string)eventArgs.Value ?? throw new ArgumentNullException());
    private bool ToBool(ChangeEventArgs eventArgs) => (bool)(eventArgs.Value ?? throw new ArgumentNullException());

}