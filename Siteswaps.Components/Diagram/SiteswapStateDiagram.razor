@using Siteswap.Details
@using Siteswap.Details.StateDiagram
@using VisNetwork.Blazor.Models
@if (Value is not null)
{
    <div class="border-1">
        <Network Id="siteswap-detail-diagram" Data="@Data" style="width: 640px; height: 480px"/>
    </div>
}

@code
{

    [Parameter] public Siteswap? Value { get; set; } = new(3);

    private NetworkData Data { get; set; } = new();

    protected override void OnParametersSet()
    {
        CreateNetworkData();
        base.OnParametersSet();
    }

    private void CreateNetworkData()
    {
        var nodes = new List<Node>();
        var edges = new List<Edge>();

        if (Value is null)
        {
            return;
        }

        var fromGraph = StateGraphFromSiteswapGenerator.CalculateGraph(Value);

        AddNodes(fromGraph, nodes);

        AddEdges(fromGraph, edges);


        Data = new NetworkData
        {
            Edges = edges,
            Nodes = nodes
        };
    }

    private static void AddEdges(StateGraph fromGraph, List<Edge> edges)
    {
        foreach (var edge in fromGraph.Graph.Edges)
        {
            AddEdge(edges, edge.N1.StateRepresentation(), edge.N2.StateRepresentation(), edge.Data.ToString());
        }
    }

    private static void AddEdge(List<Edge> edges, string from, string to, string data)
    {
        if (edges.Any(x => x.From == from && x.To == to))
        {
            return;
        }

        var item = new Edge(from, to, data)
        {
            Label = data,
            Arrows = new Arrows
            {
                To = new ArrowsOptions { Enabled = true }
            },
            Color = new ColorType
            {
                Color = "black"
            }
        };
        edges.Add(item);
    }

    private static void AddNodes(StateGraph fromGraph, ICollection<Node> nodes)
    {
        foreach (var node in fromGraph.Graph.Nodes)
        {
            AddState(nodes, node);
        }
    }

    private static void AddState(ICollection<Node> nodes, State node)
    {
        if (nodes.All(x => x.Id != node.StateRepresentation()))
        {
            nodes.Add(CreateNode(node));
        }
    }

    private static Node CreateNode(State node)
    {
        return new Node(node.StateRepresentation(), node.StateRepresentation(), 1, "circle")
        {
            Mass = 1
        };
    }
}