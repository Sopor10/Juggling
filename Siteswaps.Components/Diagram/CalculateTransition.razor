@page "/CalculateTransition"
@using Siteswap.Details
@using Siteswap.Details.StateDiagram
<h3> Calculate transitions</h3>

<div style="display: flex">
    <div >
        <h5>From</h5>
        <SiteswapInput @bind-Siteswap="From"></SiteswapInput>
    </div>
    <div >
        <h5>To</h5>
        <SiteswapInput @bind-Siteswap="To"></SiteswapInput>
    </div>
    <div >
        <h5>Max Length</h5>
        <InputNumber @bind-Value="Length"></InputNumber>
    </div>

</div>

<button class="btn btn-primary" type="submit" @onclick="Generate">Generate</button>

<div>
    @if (Error != string.Empty)
    {
        <text>@Error</text>
    }

    @if (Transitions.Any())
    {
        <ul>
            @foreach (var transition in Transitions)
            {
                <li >
                    <div style="padding: 4px">
                        @transition.PrettyPrint()
                    </div>
                </li>
            }
        </ul>
    }
</div>

@code
{

    private Siteswap? From { get; set; }

    private Siteswap? To { get; set; }

    private int Length { get; set; }

    private List<Transition> Transitions { get; set; } = new();

    private string Error { get; set; }

    protected override void OnInitialized()
    {
        From = new Siteswap(5, 3, 1);
        To = new Siteswap(4, 1, 4);
        Length = 2;
        base.OnInitialized();
    }

    private void Generate()
    {
        Error = "";
        Transitions = new List<Transition>();
        if (From is null || To is null)
        {
            if (From is null)
            {
                Error += "From is not a valid siteswap.\n";
            }

            if (To is null)
            {
                Error += "To is not a valid siteswap.\n";
            }
            return;
        }
        if (From.NumberOfObjects() != To.NumberOfObjects())
        {
            Error += $"{From} has {From.NumberOfObjects()} objects and {To} has {To.NumberOfObjects()} objects.\n";
        }

        var transitions = TransitionGenerator.CreateTransitions(From, To, Length);
        Transitions = transitions;
    }
}