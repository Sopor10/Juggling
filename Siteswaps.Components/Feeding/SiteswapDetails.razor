@page "/SiteswapDetails"
@using System.Collections.Immutable
@using Shared
@using Siteswaps.Generator.Generator

<table>
    @foreach (var siteswap in Siteswaps.Select(siteswap => siteswap))
    {
        <tr >
            <td > @siteswap.DisplayName</td>
            @for (var j = 0; j < siteswap.Juggler; j++)
            {
                <td />
            }

            @for (var i = 0; i < siteswap.Values.Length; i++)
            {
                <td>
                    @siteswap.Values[i].Transform()
                    @if (siteswap.GetThrowType(i).Juggler != siteswap.Juggler)
                    {
                        @if (siteswap.GetThrowType(i).Hand != CurrentHand(i))
                        {
                            <sub>
                                @if (Siteswaps.Count > 2)
                                {
                                    @GetPassingPartner(siteswap.GetThrowType(i).Juggler)
                                }
                                ||
                            </sub>
                        }
                        @if (siteswap.GetThrowType(i).Hand == CurrentHand(i))
                        {
                            <sub>
                                @if (Siteswaps.Count > 2)
                                {
                                    @GetPassingPartner(siteswap.GetThrowType(i).Juggler)
                                }
                                x
                            </sub>
                        }
                    }
                </td>
                @for (var j = 0; j < NumberOfTimeZones; j++)
                {
                    <td/>
                }
            }
        </tr>
    }
</table>

@code {

    [Parameter] 
    public ImmutableList<Juggler> Jugglers { get; set; } = ImmutableList<Juggler>.Empty;

    private ImmutableList<(LocalSiteswap Siteswap, Juggler Juggler)> Intermediate => Jugglers
        .Select(x => (x.SelectedSiteswap?.GetLocalSiteswap(x.TimeZone, 2, x.Name), x))
        .OfType<(LocalSiteswap, Juggler)>()
        .ToImmutableList();

    private ImmutableList<LocalSiteswap> Siteswaps => Intermediate.Select(x => x.Siteswap).ToImmutableList();


    private ImmutableList<ImmutableList<string>> PassingPartners => Intermediate.Select(x => x.Siteswap.RotateToLocal(x.Juggler.PassingSelection.ToCyclicArray()).EnumerateValues(1).ToImmutableList()).ToImmutableList();

    private int NumberOfTimeZones => Siteswaps.Select(siteswap => siteswap?.Juggler).Where(x => x is not null).Distinct().Count();

    private Hand CurrentHand(int i)
    {
        return i % 2 == 0 ? Hand.Right : Hand.Left;
    }

    private string GetPassingPartner(int siteswapNumber)
    {
        return Siteswaps[siteswapNumber].DisplayName;
    }

}
